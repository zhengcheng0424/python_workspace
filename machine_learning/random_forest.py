"""
随机森林
随机森林是一种集成学习方法，用于分类和回归问题。比如，预测股票价格。
1. **定义与基本原理**
   - 随机森林（Random Forest）是一种基于决策树的集成学习算法。
   集成学习的思想是将多个学习器（在这里是决策树）组合起来，以获得比单个学习器更好的性能。
   随机森林通过构建多个相互独立的决策树，并综合它们的结果来进行分类或回归预测。
2. **构建过程**
   - **训练数据抽样**：对于分类或回归任务，首先从原始训练数据集进行有放回的抽样（这种抽样方式也称为自助采样法，Bootstrap Sampling）。
   通过这种方式可以生成多个不同的训练子集，每个子集的大小和原始训练集相同。
   例如，假设原始训练集有100个样本，通过自助采样法生成的每个子集也大约有100个样本，但这些样本是有重复的，
   并且每次抽样会有一些样本没有被抽到（大约有36.8%的样本不会出现在每个自助采样的子集中，
   这些未被抽到的样本称为袋外数据，Out - of - Bag data）。
   - **构建决策树**：对于每个抽样得到的训练子集，构建一棵决策树。在构建决策树的过程中，每次分裂节点时，并不是使用所有的特征来选择最佳分裂特征，
   而是随机选择一部分特征。
   例如，在一个有10个特征的数据集上，可能每次只随机选择3个特征来考虑节点分裂，这样可以增加决策树的多样性。
   这些决策树会生长到最大深度或者满足其他停止生长的条件（如节点中的样本数小于某个阈值）。
3. **分类和回归的工作方式**
   - **分类任务**：当用于分类时，对于一个新的输入样本，每棵决策树都会对其进行分类并给出一个类别标签。
   随机森林会统计所有决策树的分类结果，将出现次数最多的类别作为最终的分类结果。
   例如，有一个包含5棵决策树的随机森林，对于一个新样本，3棵决策树预测为类别A，2棵决策树预测为类别B，那么最终的分类结果就是类别A。
   - **回归任务**：在回归问题中，每棵决策树会对新样本给出一个预测值。随机森林会对这些预测值求平均，将这个平均值作为最终的回归预测结果。
   例如，5棵决策树对一个新样本的预测值分别为1.2、1.3、1.1、1.4、1.0，那么最终的回归预测值就是$(1.2+1.3+1.1+1.4+1.0)/5 = 1.2$。
4. **优点**
   - **准确性高**：由于集成了多个决策树，它可以减少单个决策树的过拟合问题，从而提高模型的准确性。多个决策树的综合判断能够更好地捕捉数据中的复杂关系。
   - **鲁棒性强**：对数据中的噪声和异常值有较好的容忍度。即使部分决策树受到噪声的影响，其他决策树仍然可以提供较为合理的预测，最终结果不会受到太大的干扰。
   - **可以处理高维数据**：通过随机选择特征来构建决策树，能够有效地处理具有大量特征的数据，不会因为特征数量过多而导致性能下降过快。
   - **能够给出特征重要性排序**：可以通过计算每个特征在所有决策树分裂过程中的重要性，得到特征的重要性排序。这对于理解数据和特征选择非常有帮助。
5. **缺点**
   - **计算复杂度较高**：构建多个决策树需要大量的计算资源和时间，特别是当数据量很大或者决策树的数量很多时，训练过程可能会比较漫长。
   - **模型解释性相对较弱**：虽然可以得到特征重要性排序，但与单个决策树相比，随机森林的整体结构比较复杂，解释最终的预测结果会更加困难。
"""

from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.datasets import load_iris

# 加载数据集
data = load_iris()
x = data.data
y = data.target

# 划分训练集和测试集
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)

# 创建模型: Random Forest
model = RandomForestClassifier(n_estimators=100)

# 训练模型
model.fit(x_train, y_train)

# 预测
predictions = model.predict(x_test)

# 模型评估
accuracy = accuracy_score(y_test, predictions)
print(f"Accuracy: {accuracy * 100:.2f}%")
